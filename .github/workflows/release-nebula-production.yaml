name: Release production apps for Nebula

'on':
  push:
    tags:
      - trading/v*
      - console/v*
      - explorer/v*
      - governance/*
      - all/v*

jobs:
  build_dist:
    strategy:
      matrix:
        build: &matrix_build
          - id: neb_xchange
            env: neb_exchange
            path: /var/www/neb.exchange
          - id: neb_ninja
            env: neb_exchange,neb_ninja
            path: /var/www/neb.ninja
          - id: n_mainnet_community
            env: neb_exchange,n_mainnet_community
            path: /var/www/n.mainnet_community
    name: 'Build dist'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: yarn

      - name: Cache node modules
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-cache-node-modules-${{ hashFiles('yarn.lock') }}

      - name: Install deps
        shell: bash
        run: yarn install

      - name: Build explorer
        shell: bash
        if: ${{ contains(github.ref_name, 'explorer') || contains(github.ref_name, 'all') }}
        run: |
          yarn env-cmd --verbose --rc-file ./apps/explorer/.env.cmdrc -e "${{ matrix.build.env}}" yarn nx build explorer --skip-nx-cache

      - name: Build console
        shell: bash
        if: ${{ contains(github.ref_name, 'trading') || contains(github.ref_name, 'console') || contains(github.ref_name, 'all') }}
        run: |
          yarn env-cmd --verbose --rc-file ./apps/trading/.env.cmdrc -e "${{ matrix.build.env}}" yarn nx build trading --skip-nx-cache
          yarn nx export

      - name: Build governance
        shell: bash
        if: ${{ contains(github.ref_name, 'explorer') || contains(github.ref_name, 'all') }}
        run: |
          yarn env-cmd --verbose --rc-file ./apps/governance/.env.cmdrc -e "${{ matrix.build.env}}" yarn nx build governance --skip-nx-cache

      - name: Upload built artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend_dist_${{ matrix.build.id }}
          path: ./dist

  publish_dist:
    name: 'Publis dist'
    needs: build_dist
    runs-on: ubuntu-latest
    outputs:
      RELEASE_VERSION: ${{ steps.release_version.outputs.number }}
    strategy:
      matrix:
        target: ${{ fromJSON( vars.JSON_FRONTEND_SERVERS) }}
        build: *matrix_build
    steps:
      - name: Download built dist
        uses: actions/download-artifact@v4
        with:
          name: frontend_dist_${{ matrix.build.id }}
          path: ./

      - id: release_version
        name: 'Filter release version'
        shell: bash
        run: |
          RELEASE_VERSION=$(echo '${{ github.ref_name }}' | awk '{ sub(/([a-z]+\/)/, 'a'); print $0 }');
          echo "NUMBER=$RELEASE_VERSION" >> $GITHUB_OUTPUT;

      - name: 'Publish explorer'
        if: ${{ contains(github.ref_name, 'explorer') || contains(github.ref_name, 'all') }}
        uses: easingthemes/ssh-deploy@main
        with:
          SSH_PRIVATE_KEY: ${{ secrets.FRONTEND_DEPLOYMENT_SSH_KEY }}
          ARGS: "--archive --compress --verbose --checksum --delete -i --rsync-path='sudo rsync'"
          SOURCE: 'apps/explorer/'
          REMOTE_HOST: '${{ matrix.target }}'
          REMOTE_USER: 'fe-deployment'
          TARGET: '${{ matrix.build.path }}/explorer/dist/${{ steps.release_version.outputs.number }}'
          # EXCLUDE: "/dist/, /node_modules/"
          SCRIPT_BEFORE: |
            whoami
            sudo mkdir -p ${{ matrix.build.path }}/explorer/dist
          SCRIPT_AFTER: |
            whoami
            ls -al
            echo $RSYNC_STDOUT

      - name: 'Publish console'
        if: ${{ contains(github.ref_name, 'trading') || contains(github.ref_name, 'console') || contains(github.ref_name, 'all') }}
        uses: easingthemes/ssh-deploy@main
        with:
          SSH_PRIVATE_KEY: ${{ secrets.FRONTEND_DEPLOYMENT_SSH_KEY }}
          ARGS: "--archive --compress --verbose --checksum --delete -i --rsync-path='sudo rsync'"
          SOURCE: 'apps/trading/exported/'
          REMOTE_HOST: '${{ matrix.target }}'
          REMOTE_USER: 'fe-deployment'
          TARGET: '${{ matrix.build.path }}/trading/dist/${{ steps.release_version.outputs.number }}'
          # EXCLUDE: "/dist/, /node_modules/"
          SCRIPT_BEFORE: |
            whoami
            sudo mkdir -p ${{ matrix.build.path }}/trading/dist
          SCRIPT_AFTER: |
            whoami
            ls -al
            echo $RSYNC_STDOUT

      - name: 'Publish governance'
        if: ${{ contains(github.ref_name, 'governance') || contains(github.ref_name, 'all') }}
        uses: easingthemes/ssh-deploy@main
        with:
          SSH_PRIVATE_KEY: ${{ secrets.FRONTEND_DEPLOYMENT_SSH_KEY }}
          ARGS: "--archive --compress --verbose --checksum --delete -i --rsync-path='sudo rsync'"
          SOURCE: 'apps/governance/'
          REMOTE_HOST: '${{ matrix.target }}'
          REMOTE_USER: 'fe-deployment'
          TARGET: '${{ matrix.build.path }}/governance/dist/${{ steps.release_version.outputs.number }}'
          # EXCLUDE: "/dist/, /node_modules/"
          SCRIPT_BEFORE: |
            whoami
            sudo mkdir -p ${{ matrix.build.path }}/governance/dist
          SCRIPT_AFTER: |
            whoami
            ls -al
            echo $RSYNC_STDOUT

  enable_dist:
    name: 'Enable published dist'
    needs: publish_dist
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: ${{ fromJSON( vars.JSON_FRONTEND_SERVERS) }}
        build: *matrix_build
    steps:
      - name: Enable published explorer
        if: ${{ contains(github.ref_name, 'explorer') || contains(github.ref_name, 'all') }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ matrix. target }}
          username: fe-deployment
          key: ${{ secrets.FRONTEND_DEPLOYMENT_SSH_KEY }}
          script: |
            sudo rm -rf ${{ matrix.build.path }}/explorer/live || echo;
            sudo ln -s ${{ matrix.build.path }}/explorer/dist/${{ needs.publish_dist.outputs.RELEASE_VERSION }} ${{ matrix.build.path }}/explorer/live;

      - name: Enable published console
        if: ${{ contains(github.ref_name, 'trading') || contains(github.ref_name, 'console') || contains(github.ref_name, 'all') }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ matrix. target }}
          username: fe-deployment
          key: ${{ secrets.FRONTEND_DEPLOYMENT_SSH_KEY }}
          script: |
            sudo rm -rf ${{ matrix.build.path }}/trading/live || echo;
            sudo ln -s ${{ matrix.build.path }}/trading/dist/${{ needs.publish_dist.outputs.RELEASE_VERSION }} ${{ matrix.build.path }}/trading/live;

      - name: Enable published governance
        if: ${{ contains(github.ref_name, 'governance') || contains(github.ref_name, 'all') }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ matrix. target }}
          username: fe-deployment
          key: ${{ secrets.FRONTEND_DEPLOYMENT_SSH_KEY }}
          script: |
            sudo rm -rf ${{ matrix.build.path }}/governance/live || echo;
            sudo ln -s ${{ matrix.build.path }}/governance/dist/${{ needs.publish_dist.outputs.RELEASE_VERSION }} ${{ matrix.build.path }}/governance/live;
